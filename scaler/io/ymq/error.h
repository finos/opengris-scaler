#pragma once

#include <algorithm>
#include <cassert>
#include <cstring>
#include <exception>  // std::terminate
#include <format>
#include <functional>
#include <map>
#include <print>
#include <string>

#include "scaler/io/ymq/timestamp.h"

template <std::size_t N>
    requires(N > 0)
consteval auto getFormatString() {
    std::string str = "{}";
    for (size_t i = 1; i < N; ++i)
        str += ": {}";
    std::array<char, (N - 1) * 4 + 3> arr;
    std::ranges::copy(str, arr.begin());
    return arr;
}

// NOTE: It seems like this two lines cannot be placed in the constructor for unknown reason.
template <typename... Args>
constexpr std::string argsToString(Args&&... args) {
    static constexpr const auto str = getFormatString<sizeof...(Args)>();

    std::string res = std::format(std::string_view {str}, std::forward<Args>(args)...);
    return res;
}

struct Error: std::exception {
    enum struct ErrorCode {
        Uninit,
        InvalidPortFormat,
        InvalidAddressFormat,
        ConfigurationError,
    };

    // NOTE:
    // Format:
    //    [Timestamp, â€œ: ", Error Explanation, ": ", Other]
    // For user calls errors:
    //     Other := ["Originated from", Function Name, items...]
    // For system calls errors:
    //     Other := ["Originated from", Function Name, "Errno is", strerror(errno), items...]
    template <typename... Args>
    constexpr Error(ErrorCode e, Args&&... args) noexcept
        : _errorCode(e)
        , _logMsg(argsToString(Timestamp {}, convertErrorToExplanation(e), std::forward<Args>(args)...)) {}

    static const char* convertErrorToExplanation(ErrorCode e) { return _errorToExplanation.at(e); }

    const char* what() const noexcept override { return _logMsg.c_str(); }

    inline const static std::map<ErrorCode, const char*> _errorToExplanation = {
        {ErrorCode::Uninit, ""},
        {ErrorCode::InvalidPortFormat, "Invalid port format, example input \"tcp://127.0.0.1:2345\""},
        {ErrorCode::InvalidAddressFormat, "Invalid address format, example input \"tcp://127.0.0.1:2345\""},
        {ErrorCode::ConfigurationError, "An error generated by system call that's likely due to mis-configuration"},
    };

    const ErrorCode _errorCode;
    const std::string _logMsg;
};

template <>
struct std::formatter<Error, char> {
    template <class ParseContext>
    constexpr ParseContext::iterator parse(ParseContext& ctx) {
        return ctx.begin();
    }

    template <class FmtContext>
    constexpr FmtContext::iterator format(Error e, FmtContext& ctx) const {
        return std::ranges::copy(e._logMsg, ctx.out()).out;
    }
};

using UnrecoverableErrorFunctionHookPtr = std::function<void(Error)>;

constexpr inline void defaultUnrecoverableError(const Error e) {
    std::print(stderr, "{}\n", e);
    std::terminate();
}

inline UnrecoverableErrorFunctionHookPtr unrecoverableErrorFunctionHookPtr = defaultUnrecoverableError;

constexpr inline void unrecoverableError(Error e) {
    unrecoverableErrorFunctionHookPtr(std::move(e));
}
